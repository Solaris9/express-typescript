// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../express

declare module 'express-typescript' {
    export * from "express-typescript/Application";
    export * from "express-typescript/Controller";
}

declare module 'express-typescript/Application' {
    import Controller from "express-typescript/Controller";
    import express, { Express } from "express";
    import "reflect-metadata";
    export interface ExpressOptions {
        controllers?: string;
        port: number;
    }
    export interface Application {
        options: ExpressOptions;
        controllerManager: Controller;
        applicationDirectory: string;
        express: Express;
    }
    export function ExpressApplication(options: ExpressOptions): <T extends new (...args: any[]) => {}>(constructor: T) => {
        new (...args: any[]): {
            options: ExpressOptions;
            controllerManager: Controller;
            applicationDirectory: string;
            express: express.Express;
        };
    } & T;
}

declare module 'express-typescript/Controller' {
    import { Application } from "express-typescript/Application";
    export function Controller(route: string): <T extends new (...args: any[]) => {}>(constructor: T) => T;
    export function RequestBody(target: any, propertyKey: string, parameterIndex: number): void;
    export function HTTPRequest(target: any, propertyKey: string, parameterIndex: number): void;
    export function HTTPResponse(target: any, propertyKey: string, parameterIndex: number): void;
    export function Next(target: any, propertyKey: string, parameterIndex: number): void;
    export function PathVariable(variable?: string): (target: any, propertyKey: string, parameterIndex: number) => void;
    export type Methods = "ALL" | "GET" | "POST" | "PUT" | "DELETE" | "PATCH" | "OPTIONS" | "HEAD" | string;
    export interface RequestOptions {
        route: string;
        method?: Methods;
    }
    export function GetMapping(route: string): any;
    export function PutMapping(route: string): any;
    export function PatchMapping(route: string): any;
    export function PostMapping(route: string): any;
    export function DeleteMapping(route: string): any;
    export function RequestMapping(options: RequestOptions): any;
    export function RequestMapping(route: string, method?: Methods): any;
    export function Middleware(...functions: ((request: Request, response: Response, next: () => void) => void)[]): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
    export function Parameter(parameter?: string): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
    export default class {
        fullDirectory: string;
        parameters: Map<string, Function>;
        init(app: Application): void;
        makeBody(clazz: any, body: any): any;
    }
}

